# Generated with openingBookAdapter.py
import random

class OpeningBook:

    def __init__(self):
        self._myColor = None
        self._opening = True
        self._openingRemaining = [
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (2, 6), (4, 7), (6, 5)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (2, 6)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (3, 4), (2, 6), (3, 7), (2, 5)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (3, 4), (2, 6), (3, 7), (5, 3)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (3, 4), (2, 6), (3, 7)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (3, 4), (2, 5), (2, 4), (3, 3), (6, 6), (5, 3), (5, 6), (7, 3),
             (6, 3), (7, 4), (4, 2), (7, 6)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (3, 4), (2, 5), (2, 4), (3, 3), (6, 6), (5, 3), (5, 6)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (5, 6)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (5, 3)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3), (2, 5)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3), (6, 6), (5, 6)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3), (6, 6), (5, 3), (5, 2), (4, 2), (7, 3), (6, 1), (6, 2),
             (7, 4), (8, 3), (8, 5), (7, 5), (8, 6), (8, 4), (8, 2)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3), (6, 6)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3), (7, 4), (5, 6), (6, 6), (7, 5), (8, 6), (7, 6),
             (6, 7)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3), (7, 4)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5), (6, 5), (6, 3)],
            [(6, 4), (4, 3), (3, 6), (4, 6), (3, 5)],
            [(6, 4), (4, 3), (3, 6), (7, 4)],
            [(6, 4), (4, 3), (3, 5), (4, 6), (3, 4), (6, 5), (5, 6), (6, 6), (3, 7), (2, 5), (2, 6)],
            [(6, 4), (4, 3), (3, 5), (4, 6), (3, 4), (6, 5), (5, 6), (6, 6), (3, 7), (3, 3)],
            [(6, 4), (4, 3), (3, 5), (4, 6), (3, 4)],
            [(6, 4), (4, 3), (3, 5), (4, 6), (5, 3)],
            [(6, 4), (4, 3), (3, 5), (7, 4), (3, 3), (3, 4), (4, 2), (4, 6), (2, 5), (3, 6), (5, 6), (6, 6)],
            [(6, 4), (4, 3), (3, 5), (7, 4), (3, 3)],
            [(6, 4), (4, 3), (3, 5), (7, 4)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (4, 6)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 6)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (5, 2)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 6), (3, 5), (2, 5),
             (3, 6)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 6), (3, 5), (2, 5)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 6), (3, 5), (7, 4), (3, 6),
             (2, 5), (5, 7)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 6), (3, 5)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 5), (3, 5), (7, 4), (3, 6),
             (6, 2), (4, 7), (5, 2), (6, 7)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 5), (3, 5), (7, 3)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 5), (3, 5)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2), (7, 5)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 6), (6, 3), (5, 3), (4, 2)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (4, 2)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (5, 3), (6, 3)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (5, 3)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (3, 3), (6, 6)],
            [(6, 4), (4, 3), (3, 4), (6, 5), (5, 6), (4, 6)],
            [(6, 4), (4, 3)],
            [(6, 4), (6, 5)],
            [(6, 4), (6, 3), (3, 5), (6, 5)],
            [(6, 4), (6, 3), (4, 6), (6, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (3, 6), (3, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (3, 6), (4, 3), (6, 6), (3, 5), (3, 4), (2, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (3, 6), (4, 2), (6, 6)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (3, 6)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (3, 5), (4, 6), (3, 6)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (3, 5), (4, 6), (6, 6), (5, 7)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (3, 5), (5, 2), (2, 4), (5, 7)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (3, 5), (5, 2), (7, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (3, 5), (5, 2)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (3, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (7, 4), (4, 3), (7, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (7, 4), (6, 6), (7, 5), (7, 3), (7, 6), (4, 3), (6, 2), (8, 4),
             (8, 5), (8, 6), (5, 2)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (7, 4), (7, 6), (7, 5), (6, 6), (3, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (7, 4), (7, 6), (7, 5), (6, 6), (7, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (3, 4), (7, 4)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6), (4, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (5, 6)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 6), (4, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 6), (6, 6), (7, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 6)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 4), (4, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 4), (5, 2), (4, 2)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 4), (5, 2), (5, 6)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 4), (5, 2), (6, 2), (3, 4), (5, 6), (6, 6), (3, 5), (4, 6), (3, 7)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 4)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 3), (3, 4), (7, 5), (7, 4), (6, 6), (5, 6), (3, 5)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 3), (3, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 3)],
            [(6, 4), (6, 3), (5, 3), (6, 5), (7, 2)],
            [(6, 4), (6, 3)]
        ]

    def getNextMove(self):
        move = None
        if self._opening:
            if len(self._openingRemaining) is 0:
                self._opening = False
                return move
            x, y = self.findMove()
            self.updateBook(x, y)

            move = self._myColor, x, y
        return move

    def findMove(self):
        return random.choice(self._openingRemaining)[0]

    def setColor(self, color):
        self._myColor = color

    def updateBook(self, x, y):
        if x is None or y is None:
            return

        toClear = []  # Need ?
        for sequence in self._openingRemaining:
            # clear (x,y) from the sequence that contains it
            a = sequence.pop(0)
            # clear the sequence that doesn't contain it and empty sequence
            if not a == (x, y) or len(sequence) is 0:
                toClear.append(sequence)
        for toDelete in toClear:
            self._openingRemaining.remove(toDelete)

    def findOpponentMove(self):
        return None, None

    def addOponnentMove(self, x, y):
        self.updateBook(x, y)
